#=====================================================================================
#
# Description:   Build OpenWrt with Image Builder
# This file is a part of the make OpenWrt for Amlogic s9xxx tv box
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Documentation: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#
#=====================================================================================

name: Generate RTA-WRT Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:23.05.5"
        type: choice
        options:
          - openwrt:23.05.5
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: false
        default: "hg680p"
        type: choice
        options:
          - all
          - s905x-b860h_s905x
          - s905w_s905x_s905mb_s905l3b_s905x2_s905x3_s912_s922x_s922x-ct2000_s922x-reva
          - s905x3-x88-pro-x3_s912-m8s-pro_s905x-t95_s912-t95z-plus_s905l3-unt400g1_s905lb-r3300l
          - seewo-sv21_smart-am40_station-m1_sw799_tn3399_zysj_tvi3315a_xiaobao_zcube1-max
          - vplus_tanix-tx6_tqc-a01
          - a311d
          - beikeyun
          - chainedbox
          - crrc
          - dg3399
          - dlfr100
          - e20c
          - e25
          - eaidk-610
          - emb3531
          - fine3399
          - firefly-rk3399
          - jp-tvbox
          - h28k
          - h66k
          - h68k
          - h69k
          - h88k
          - h88k-v3
          - h96-max-m2
          - hs530r
          - hugsun-x99
          - ipc-r
          - king3399
          - kylin3399
          - leez
          - lx-r3s
          - mrkaio-m68s
          - nanopi-r5c
          - nanopi-r5s
          - orangepi-5-plus
          - panther-x2
          - r66s
          - r68s
          - renegade-rk3328
          - rk3318-box
          - rock5b
          - rock5c
          - s905
          - s905-beelink-mini
          - s905-mxqpro-plus
          - s905d
          - s905d-ki-pro
          - s905d-sml5442tw
          - s905l
          - s905l-mg101
          - s905l2
          - s905l2-e900v21e
          - s905l2-wojia
          - s905l3
          - s905l3-cm211
          - s905l3-unt400g1
          - s905l3-unt402a
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
          - s905l3b
          - s905l3b-e900v22d
          - s905l3b-e900v22e
          - s905l3b-ip103h
          - s905l3b-rg020et-ca
          - s905l3b-unt403a
          - s905lb-q96-mini
          - s905lb-r3300l
          - s905mb
          - s905w
          - s905w-w95
          - s905w-x96-mini
          - s905w-x96w
          - s905x
          - s905x-b860h
          - s905x-nexbox-a95x
          - s905x-t95
          - s905x-tbee
          - s905x-tx9
          - s905x2
          - s905x2-km3
          - s905x2-x96max-2g
          - s905x3
          - s905x3-2101
          - s905x3-a100
          - s905x3-a95xf3
          - s905x3-a95xf3-gb
          - s905x3-b
          - s905x3-h96max
          - s905x3-hk1
          - s905x3-ip1001m
          - s905x3-q1
          - s905x3-q2
          - s905x3-tx3
          - s905x3-tx3-bz
          - s905x3-ugoosx3
          - s905x3-whale
          - s905x3-x88-pro-x3
          - s905x3-x96air
          - s905x3-x96air-gb
          - s905x3-x96max
          - s912
          - s912-h96pro-plus
          - s912-m8s-pro
          - s912-nexbox-a1
          - s912-nexbox-a2
          - s912-onecloudpro
          - s912-phicomm-t1
          - s912-t95z-plus
          - s912-tx8-max
          - s912-tx9-pro-2g
          - s912-tx9-pro-3g
          - s912-x92
          - s912-zyxq-fake
          - s922x
          - s922x-ct2000
          - s922x-gtking
          - s922x-gtkingpro-h
          - s922x-odroid-n2
          - s922x-reva
          - s922x-ugoos-am6
          - seewo-sv21
          - smart-am40
          - station-m1
          - swan1-w28
          - sw799
          - tanix-tx6
          - tb-ls3399
          - tn3399
          - tpm312
          - tqc-a01
          - tvi3315a
          - vplus
          - xiaobao
          - zcube1-max
          - zysj
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.1.y_6.6.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
      tunnel:
        description: "Select VPN Client app (!passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "openclash-passwall"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - openclash-passwall
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean

env:
  TYPE: AMLOGIC
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}

jobs:
  Generate:
    name: amlogic-${{ inputs.target }}-${{ inputs.release_branch }}-${{ inputs.tunnel }}
    runs-on: ubuntu-22.04

    steps:
      - name: Checking Tunnel Option
        id: tunnelopt
        run: |
          echo "Selected tunnel option: [$TUNNEL]"
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Initialization environment (normal)
        if: github.event.inputs.target != 'all' && steps.tunnelopt.outputs.status == 'success' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"
          
      - name: Initialization environment (deep)
        id: init
        if: github.event.inputs.target == 'all' && steps.tunnelopt.outputs.status == 'success' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        if: github.event.inputs.target == 'all'
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Checkout
        uses: actions/checkout@v4
        with: 
          path: origin

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "all" ]; then
            echo "openwrt_board=all" >> $GITHUB_ENV
          else
            echo "openwrt_board=$TARGET" >> $GITHUB_ENV
          fi
          if [ "$(echo "${RELEASE_BRANCH#*:}" | cut -d'.' -f1)" == "23" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
            TARGET_NAME="armsr-armv8"
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          else
            echo "PROFILE=Default" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armvirt/64" >> $GITHUB_ENV
            echo "TARGET_NAME=armvirt-64" >> $GITHUB_ENV
            TARGET_NAME="armvirt-64"
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          fi
          echo "WORKING_DIR="${RELEASE_BRANCH%:*}"-imagebuilder-"$TARGET_NAME".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads."${RELEASE_BRANCH%:*}".org" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Download Image Builder
        id: download
        run: |
          RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          wget -nv "$RELEASE"
          tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          if [ "$TARGET" == "all" ]; then
             mkdir -p /builder/$WORKING_DIR
             ln -sf /builder/$WORKING_DIR $GITHUB_WORKSPACE/$WORKING_DIR
             ln -sf /builder/$WORKING_DIR /home/runner/work/_actions/ophub/amlogic-s9xxx-openwrt/main/openwrt
          fi
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/external-package-urls.sh
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/misc.sh
          if [[ "$TUNNEL" == "all" ]]; then 
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh openclash-passwall
          elif [[ "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "openclash" ]]; then
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh "$TUNNEL"
          else
              echo "No VPN Client selected"
          fi
          if [ "$TUNNEL" = "openclash-passwall" ] || [ "$TUNNEL" == "openclash" ] || [ "$TUNNEL" = "all" ]; then bash scripts/clash-core.sh; fi
          echo "Total custom packages: $(find packages -type f -name "*.ipk" | wc -l)"
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Build Rootfs ${{ inputs.release_branch }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [[ "$TUNNEL" == "all" ]]; then
            for t in openclash-passwall openclash passwall no-tunnel; do
              echo "Compiling with VPN Client: $t"
              if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
              time bash make-build.sh $PROFILE $t
              for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
            done
          elif [[ "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "openclash" || "$TUNNEL" == "no-tunnel" ]]; then
            echo "Compiling with VPN Client: $TUNNEL"
            bash make-build.sh $PROFILE $TUNNEL
            for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
          fi
          ls -l compiled_images
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          rm -rf $(ls . | grep -vE "^compiled_images$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Packaging ${{ inputs.release_branch }}
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: $WORKING_DIR/compiled_images/*rootfs.tar.gz
          openwrt_board: ${{ env.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          builder_name: HOUJIE-WRT

      - name: Prepare file before upload
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        id: prep_upload
        run: |
          cd $WORKING_DIR
          for file in compiled_images/*rootfs.tar.gz; do mv "$file" ${{ env.PACKAGED_OUTPUTPATH }}; done
          cd ${{ env.PACKAGED_OUTPUTPATH }}
          for file in *.img.gz; do mv "$file" HOUJIE-WRT_$(basename "$file" .img.gz)$( echo "_$TUNNEL" ).img.gz; done
          for file in *rootfs.tar.gz; do mv "$file" HOUJIE-WRT_$(basename "$file" .tar.gz)$( echo "_$TUNNEL" ).tar.gz; done
          rm -r *.sha && sha256sum *.gz > sha256sums
          ls -l
          echo "RELEASE_TAG=OpenWrt-Amlogic-${{ env.DATE }}-${{ env.TARGET_NAME }}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ steps.prep_upload.outputs.status }} == 'success' && !cancelled()
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.PACKAGED_OUTPUTPATH }}/*
          tag: ${{ env.RELEASE_TAG }}
          release_name: "HOUJIE-WRT Amlogic OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.RELEASE_TAG }}/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT ${{ env.BASE }}-${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: sijitekowolu
            # - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)
            
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt


  update-readme:
    needs: Generate
    runs-on: ubuntu-latest
    name: "Update README.md"
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3

      - name: Update README.md
        run: |
          sed -i -E "s|Amlogic_Latest-[0-9]{8}-blue|Amlogic_Latest-$(date +'%Y%m%d')-blue|g" README.md

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "Auto Update $(date +'%Y-%m-%d %H:%M:%S')"
          git push
