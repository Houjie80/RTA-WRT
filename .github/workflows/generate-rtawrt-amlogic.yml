#=====================================================================================
#
# Description:   Build OpenWrt with Image Builder
# This file is a part of the make OpenWrt for Amlogic s9xxx tv box
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Documentation: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#
#=====================================================================================

name: Generate RTA-WRT Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "latest"
        type: choice
        options:
          - snapshots
          - latest
      target:
        description: "Select device board"
        required: false
        default: "s905x_s905x-b860h_s905x2"
        type: choice
        options:
          - all
          - s905x
          - s905x2
          - s905x-b860h
          - s905x_s905x-b860h_s905x2
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.y_5.10.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
          - 6.1.y_6.6.y_5.15.y_5.10.y
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      upload-artifacts:
        description: "Upload as artifacts only"
        required: false
        default: "false"
        type: boolean

env:
  TYPE: AMLOGIC
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}

jobs:
  Generate:
    name: amlogic-${{ inputs.target }}-${{ inputs.release_branch }}
    runs-on: ubuntu-22.04

    steps:
          
      - name: Initialization environment (normal)
        if: github.event.inputs.target != 'all' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"
          
      - name: Initialization environment (deep)
        id: init
        if: github.event.inputs.target == 'all' && !cancelled()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        if: github.event.inputs.target == 'all'
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: origin

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "all" ]; then
            echo "openwrt_board=all" >> $GITHUB_ENV
          else
            echo "openwrt_board=$TARGET" >> $GITHUB_ENV
          fi
          
          echo "PROFILE=generic" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
          echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          TARGET_NAME="armsr-armv8"
          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          echo "WORKING_DIR=openwrt-imagebuilder-"$TARGET_NAME".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.openwrt.org" >> $GITHUB_ENV
          echo "BASE=openwrt" >> $GITHUB_ENV
          openwrt_page=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/openwrt/openwrt/releases/latest)
          if [ "$RELEASE_BRANCH" == "snapshots" ]; then
            latest_tag=snapshots
          else
            latest_tag=$(echo "$openwrt_page" | grep -oP 'v[0-9.]+' | sed 's/^v//')
          fi
          echo "BRANCH=${latest_tag}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Download Image Builder
        id: download
        run: |
          if [ "$BRANCH" == "snapshots" ]; then
            SNAPSHOTS="$DOWNLOAD_BASE/snapshots/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$TARGET_NAME.Linux-x86_64.tar.zst"
            wget -nv "$SNAPSHOTS"
            tar -xvf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.zst && mv *-imagebuilder-* $WORKING_DIR && sync
          else
            RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
            wget -nv "$RELEASE"
            tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          fi
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/external-package-urls.sh
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/misc.sh
          bash scripts/tunnel_app.sh
          bash scripts/clash-core.sh
          echo "Total custom packages: $(find packages -type f -name "*.ipk" | wc -l)"
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Build Rootfs ${{ inputs.release_branch }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
          time bash make-build.sh $PROFILE
          for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
          ls -l compiled_images
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          rm -rf $(ls . | grep -vE "^compiled_images$|^CHANGELOG.md$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Packaging ${{ inputs.release_branch }}
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        uses: Houjie80/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: $WORKING_DIR/compiled_images/*rootfs.tar.gz
          openwrt_board: ${{ env.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: true
          kernel_repo: ophub/kernel
          kernel_usage: stable
          builder_name: RTA-WRT

      - name: Prepare file before upload
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        id: prep_upload
        run: |
          cd $WORKING_DIR
          for file in compiled_images/*rootfs.tar.gz; do mv "$file" ${{ env.PACKAGED_OUTPUTPATH }}; done
          cd ${{ env.PACKAGED_OUTPUTPATH }}
          for file in *.img.gz; do mv "$file" RTA-WRT_$(basename "$file" .img.gz).img.gz; done
          for file in *rootfs.tar.gz; do mv "$file" RTA-WRT_$(basename "$file" .tar.gz).tar.gz; done
          rm -r *.sha && sha256sum *.gz > sha256sums
          search_patterns=(
              "_amlogic_s905x_"
              "_amlogic_s905x-b860h_"
              "_amlogic_s905x2_"
          )
          replace_patterns=(
              "Amlogic_HG680P"
              "Amlogic_B860HV1-V2"
              "Amlogic_B860HV5"
          )
          if [ ${#search_patterns[@]} -ne ${#replace_patterns[@]} ]; then
              echo "Jumlah search dan replace tidak cocok!"
              exit 1
          fi
          for ((i=0; i<${#search_patterns[@]}; i++)); do
              search="${search_patterns[$i]}"
              replace="${replace_patterns[$i]}"
          
              for file in *${search}*.img.gz; do
                  if [[ -f "$file" ]]; then
                      kernel=$(echo "$file" | grep -oP 'k[0-9.]+')
                      date=$(echo "$file" | grep -oP '[0-9]{4}\.[0-9]{2}\.[0-9]{2}')
                      new_name="RTA-WRT_${replace}_${kernel}_${date}.img.gz"
                      echo "Renaming: $file -> $new_name"
                      mv "$file" "$new_name"
                  fi
              done
          done
          ls -l
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload All Firmware to Artifacts
        if: github.event.inputs.upload-artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}
          path: ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz

      - name: Add changelog info
        if: github.event.inputs.upload-artifacts == 'false'
        id: changelog
        shell: bash
        run: |
          cd $WORKING_DIR
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT

      - name: Upload Firmware to Release
        if: github.event.inputs.upload-artifacts == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.PACKAGED_OUTPUTPATH }}/*
          tag: ${{ env.BRANCH }}-amlogic-${{ env.DATE }}
          release_name: "RTA-WRT Amlogic OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          make_latest: true
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.BRANCH }}-amlogic-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt Amlogic ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}

            Detail Firmware:
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)
            
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt

  stale:
    needs: Generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v7.0.0
        with:
          stale-issue-message: "Stale Issue"
          stale-pr-message: "Stale PR"
          stale-issue-label: "no-issue-activity"
          exempt-issue-labels: "awaiting-approval,awaiting,work-in-progress"
          stale-pr-label: "no-pr-activity"
          exempt-pr-labels: "awaiting-approval,awaiting,work-in-progress"
          # only-labels: 'bug,enhancement'
          days-before-issue-stale: 10
          days-before-pr-stale: 10
          days-before-issue-close: 5
          days-before-pr-close: -1
          operations-per-run: 500

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
