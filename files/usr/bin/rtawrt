#!/bin/bash
clear1() {
  clear
}
alias clear1='clear1'
clear1

silent_update() {
  local GITHUB_URL="https://raw.githubusercontent.com/rtaserver/RTA-WRT/refs/heads/main/files/usr/bin/rtawrt"
  local LOCAL_SCRIPT="/usr/bin/rtawrt"
  local TEMP_FILE=$(mktemp)

  download_remote_script() {
    curl -s -o "$TEMP_FILE" --connect-timeout 3 --max-time 3 "$GITHUB_URL"
    if [ $? -ne 0 ]; then
      return 1
    fi
  }

  calculate_hash() {
    local file=$1
    sha256sum "$file" | awk '{ print $1 }'
  }

  update_local_script() {
    local LOCAL_HASH=$(calculate_hash "$LOCAL_SCRIPT")
    local REMOTE_HASH=$(calculate_hash "$TEMP_FILE")
    if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
      cp "$LOCAL_SCRIPT" "${LOCAL_SCRIPT}.bak"
      mv "$TEMP_FILE" "$LOCAL_SCRIPT"
      chmod +x "$LOCAL_SCRIPT"
      exec "$LOCAL_SCRIPT"
    else
      rm -rf "$TEMP_FILE"
    fi
  }

  download_remote_script && update_local_script
  clear
}

silent_update

######################################################################
terminal_width=$(stty size | awk '{print $2}')
logorta="
█▀█ ▀█▀ ▄▀█   █░█░█ █▀█ ▀█▀
█▀▄ ░█░ █▀█   ▀▄▀▄▀ █▀▄ ░█░
"
txt(){
  local char="${1:-}"
  while IFS= read -r line; do
    line_length=${#line}
    padding=$(( (terminal_width - line_length) / 2 ))
    printf "%${padding}s%s\n" "" "$line" | lolcat -h 0.1 -v 1 -g ffffff:00ff3b
  done <<< "$char"
}

garis() {
  local char="${1:-=}"
  printf "%${terminal_width}s\n" | tr ' ' "$char" | lolcat -h 0.1 -v 1
}

logo(){
  garis
  while IFS= read -r line; do
    line_length=${#line}
    padding=$(( (terminal_width - line_length) / 2 ))
    printf "%${padding}s%s\n" "" "$line" | lolcat -g 006786:5bc0de
  done <<< "$logorta"
  txt "Created By RizkiKotet"
  garis
}
######################################################################

function print_info() {
  local os=$(grep 'DISTRIB_DESCRIPTION' /etc/openwrt_release | cut -d "'" -f 2 2>/dev/null || echo "null")
  [ -z "$os" ] && os="null"
  local host=$(cat /proc/device-tree/model 2>/dev/null | tr -d '\0' || echo "$(cat /sys/devices/virtual/dmi/id/board_vendor 2>/dev/null | tr -d '\0') $(cat /sys/devices/virtual/dmi/id/board_name 2>/dev/null | tr -d '\0')" || echo "null")
  [ -z "$host" ] && host="null"
  local kernel=$(uname -r 2>/dev/null || echo "null")
  [ -z "$kernel" ] && kernel="null"
  local uptime=$(awk '{print int($1/86400)" days, "int($1%86400/3600)" hours, "int(($1%3600)/60)" minutes"}' /proc/uptime 2>/dev/null || echo "null")
  [ -z "$uptime" ] && uptime="null"
  local packages=$(opkg list-installed | wc -l 2>/dev/null || echo "null")
  [ -z "$packages" ] && packages="null"
  local cpu_model=$(awk -F ': ' '/model name/ { print $2; exit }' /proc/cpuinfo 2>/dev/null || echo "null")
  [ -z "$cpu_model" ] && cpu_model="null"
  local cpu_temp=$(cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null | awk '{print $1/1000"°C"; exit}' || echo "null")
  [ -z "$cpu_temp" ] && cpu_temp="null"
  local cpu_cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || echo "null")
  [ -z "$cpu_cores" ] && cpu_cores="null"
  local mem_usage=$(free -m | awk '/Mem:/ {print $3}' 2>/dev/null || echo "null")
  [ -z "$mem_usage" ] && mem_usage="null"
  local mem_total=$(free -m | awk '/Mem:/ {print $2}' 2>/dev/null || echo "null")
  [ -z "$mem_total" ] && mem_total="null"
  local disk_usage=$(df -h / | awk 'NR==2 {print $3" / "$2" ("$5")"}' 2>/dev/null || echo "null")
  [ -z "$disk_usage" ] && disk_usage="null"
  local local_ip=$(uci get network.lan.ipaddr 2>/dev/null || echo "null")
  [ -z "$local_ip" ] && local_ip="null"

  local public_ip_info=$(curl -s --max-time 3 https://api.myip.com/ || echo "no_internet")
  
  if [[ "$public_ip_info" == "no_internet" ]]; then
    local public_ip="$local_ip"
    local country="N/A"
    local country_code="N/A"
  else
    local public_ip=$(echo "$public_ip_info" | awk -F'"' '/"ip":/ {print $4}')
    local country=$(echo "$public_ip_info" | awk -F'"' '/"country":/ {print $8}')
    local country_code=$(echo "$public_ip_info" | awk -F'"' '/"cc":/ {print $12}')
  fi

  txt "OS: $os"
  txt "Host: $host"
  txt "Kernel: $kernel"
  txt "Uptime: $uptime"
  txt "Packages: $packages (opkg)"
  txt "CPU: $cpu_model ($cpu_cores cores) @ MHz [$cpu_temp]"
  txt "Memory: ${mem_usage}MiB / ${mem_total}MiB ($(awk "BEGIN {printf \"%.0f\", ($mem_usage/$mem_total*100)}")%)"
  txt "Disk (/): $disk_usage"
  txt "Local IP: $local_ip"
  txt "Public IP: $public_ip"
  txt "Country: $country ($country_code)"
}

cmd() {
local MAX_TIME=60
while true; do
  local start_time=$(date +%s)
  txt "Please wait a moment.."
  txt "Make sure the internet connection is smooth.."
  local output=$($1 2>&1)
  local exit_code=$?
  local end_time=$(date +%s)
  local elapsed_time=$((end_time - start_time))
  if [ $exit_code -eq 0 ]; then
    if [ $elapsed_time -gt $MAX_TIME ]; then
      txt "${2} was successful, but connection was slow (time: ${elapsed_time}s)."
    else
      txt "${2} is successful."
    fi
    sleep 3
    clear
    break
  else
    if [ $elapsed_time -gt $MAX_TIME ]; then
      txt "${2} failed, probably due to slow connection (time: ${elapsed_time}s). Repeat..."
    else
      txt "${2} failed. Repeat..."
    fi
    txt "Error logs:"
    txt "$output"
    sleep 2
    clear
  fi
  sleep 5
  clear
done
}

function update_script(){
  GITHUB_URL="https://github.com/rtaserver/RTA-WRT/raw/main/files/usr/bin/rtawrt"
  LOCAL_SCRIPT="/usr/bin/rtawrt"
  LOCAL_HASH=$(sha256sum "$LOCAL_SCRIPT" | awk '{ print $1 }')
  TEMP_FILE="/tmp/rtawrt"
  cmd "aria2c --out=${TEMP_FILE} ${GITHUB_URL}" "Update Script"
  REMOTE_HASH=$(sha256sum "$TEMP_FILE" | awk '{ print $1 }')
  if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
    txt "Update local scripts with the latest scripts."
    cp "$LOCAL_SCRIPT" "${LOCAL_SCRIPT}.bak"
    mv "$TEMP_FILE" "$LOCAL_SCRIPT"
    chmod +x "$LOCAL_SCRIPT"
    exec "$LOCAL_SCRIPT"
  else
    txt "The script is up to date, no update needed."
  fi
  rm -rf "$TEMP_FILE"
  clear
}

function sub_menu(){
  clear1
  logo
  txt "Usage: rtawrt [option]"
  txt "Available options:"
  txt "update - Check and update the script"
  txt "openclash - Tools For OpenClash"
  txt "ceksmsmm - Cek SMS Modem Manager"
  txt "radmon - Tools For Radius Monitor"
  garis
}

function openclash(){
  clear1
  logo
  txt "OpenClash Tools"
  txt "Usage: rtawrt openclash [option]"
  txt "Available options:"
  txt "reinstall - Reinstall OpenClash"
  txt "install-core - Install Latest Core + Mihomo Core"
  txt "full-install - Full Install OpenClash + Patch"
  txt "patch-only - Patch Dashboard + Add Config Editor"
  if [ -f "/etc/init.d/openclash.bak" ]; then
    txt "fixoc1" - Fix OC Bengong
  fi
  txt "uninstall - Uninstall OpenClash"
  garis
  if [ ! -z "$1" ]; then
    case "$1" in
      fixoc1)
      /etc/init.d/openclash stop
      rm -rf /etc/init.d/openclash
      mv /etc/init.d/openclash.bak /etc/init.d/openclash
      /etc/init.d/openclash restart
      ;;
      *)
      ./usr/bin/openclash.sh "$@"
      ;;
    esac
  fi
}

function ceksmsmm(){
  clear1
  logo
  # Created by Frizkyiman
  # Github https://github.com/frizkyiman/

  modem_info=$(mmcli -L | awk -F']' '/Modem/{print $2}' | sed 's/^[ \t]*//')
  modem_id=$(mmcli -L | awk -F'/Modem/' 'NF>1{print $2; exit}' | awk '{print $1}')
  sms_list=$(mmcli -m "$modem_id" --messaging-list-sms)

  log_file="/root/sms_message.log"
  if [ ! -f "$log_file" ]; then
    touch "$log_file"
  fi
  max_file_size=524288 #0.5MB

  if [ "$(mmcli -L)" == "No modems were found" ]; then
      txt "Error: Modem not found."
      exit 1
  elif [ "$sms_list" = "No sms messages were found" ]; then
      txt "No SMS messages were found from modem [$modem_info]"
      exit 0
  else
      txt "SMS received from modem [$modem_info]"
      txt "SMS Message list:"
      txt "$sms_list"

      echo "$sms_list" | while IFS= read -r sms_info; do
          sms_id=$(echo "$sms_info" | awk -F'/SMS/' 'NF>1{print $2}' | awk '{print $1}')
          message=$(mmcli -m "$modem_id" --sms "$sms_id")
          if [ -n "$message" ]; then
              txt "$message" | tee temp_message.log
              cat "$log_file" >> temp_message.log && mv temp_message.log "$log_file"
          fi
      done
  fi

  file_size=$(ls -l "$log_file" | awk '{print $5}')
  if [ "$file_size" -gt "$max_file_size" ]; then
      rm "$log_file" && touch "$log_file"
  fi

}

function radmon(){
  clear1
  logo
  txt "Radmon Tools"
  txt "Usage: rtawrt radmon [option]"
  txt "Available options:"
  txt "restart - Restart Radmon / Radius Chilli"
  txt "up-radmon - Update RadiusMonitor"
  txt "up-raddash - Update RadiusDashboard"
  garis
  if [ ! -z "$1" ]; then
    case "$1" in
      restart)
      /etc/init.d/radiusd restart
      /etc/init.d/chilli restart
      ;;
      up-radmon)
      git clone https://github.com/Maizil41/RadiusMonitor /www/RadiusMonitor
      mysql -u root -p"radius" radius < /www/RadiusMonitor/radmon.sql
      ;;
      up-raddash)
      git clone https://github.com/Maizil41/radiusbilling /www/raddash
      mysql -u root -p"radius" radius < /www/raddash/raddash.sql
      ;;
    esac
  fi
}
######################################################################
## MENU

main_menu(){
  clear1
  logo
  print_info
  garis
  txt "Usage: rtawrt menu - To Show More Menu"
  garis
}

######################################################################

if [ -z "$1" ]; then
  # If $1 is empty, show the menu
  main_menu
else
  # If $1 has a value, check what command it is and execute
  case "$1" in
    menu)
      sub_menu
      ;;
    update)
      update_script
      ;;
    openclash)
      openclash "${@:2}"
      ;;
    ceksmsmm)
      ceksmsmm
      ;;
    radmon)
      radmon
      ;;
    *)
      echo "Invalid option: $1" | lolcat
      ;;
  esac
  # After executing the function, return to the menu
  # main_menu
fi
